import streamlit as st
import pandas as pd
import gspread
from datetime import datetime
from google.oauth2.service_account import Credentials
from io import BytesIO

# ===== K·∫æT N·ªêI GOOGLE SHEET =====
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
credentials = Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=SCOPES
)

gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1vVwCCoKCuRZZLx6QrprgKM8b067F-p8QKYVbkc1yavo/edit?usp=sharing")

# ƒê·ªçc c√°c sheet
df_xe = pd.DataFrame(spreadsheet.worksheet("Xe").get_all_records())
df_bdt = pd.DataFrame(spreadsheet.worksheet("L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo").get_all_records())
df_ls = pd.DataFrame(spreadsheet.worksheet("L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng").get_all_records())

# Chuy·ªÉn ng√†y v·ªÅ ƒë·ªãnh d·∫°ng datetime
df_ls["Ng√†y"] = pd.to_datetime(df_ls["Ng√†y"], dayfirst=True, errors="coerce")
df_bdt["Ng√†y"] = pd.to_datetime(df_bdt["Ng√†y"], dayfirst=True, errors="coerce")

st.set_page_config(page_title="Tra c·ª©u b·∫£o d∆∞·ª°ng xe", layout="wide")
st.title("üöó Tra c·ª©u b·∫£o d∆∞·ª°ng xe")

# ==== CH·ªåN BI·ªÇN S·ªê ====
bien_so_list = sorted(df_xe["Bi·ªÉn s·ªë"].unique())
bien_so = st.selectbox("üîç Ch·ªçn bi·ªÉn s·ªë xe", options=bien_so_list)

if bien_so:
    st.success(f"‚úÖ ƒê√£ ch·ªçn: {bien_so}")

    # ==== TH√îNG TIN XE ====
    st.subheader("üìÑ Th√¥ng tin xe")
    st.dataframe(df_xe[df_xe["Bi·ªÉn s·ªë"] == bien_so], use_container_width=True)

    # ==== L·ªäCH B·∫¢O D∆Ø·ª†NG TI·∫æP THEO ====
    st.subheader("üõ†Ô∏è L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo")
    bdt_row = df_bdt[df_bdt["Bi·ªÉn s·ªë"] == bien_so]
    if not bdt_row.empty:
        st.dataframe(bdt_row, use_container_width=True)
    else:
        st.info("üö´ Ch∆∞a c√≥ l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo.")

    # ==== L·ªäCH S·ª¨ B·∫¢O D∆Ø·ª†NG ====
    st.subheader("üìö L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")

    col1, col2, col3 = st.columns(3)
    with col1:
        tu_ngay = st.date_input("üìÖ T·ª´ ng√†y", value=None)
    with col2:
        den_ngay = st.date_input("üìÖ ƒê·∫øn ng√†y", value=None)
    with col3:
        xem_btn = st.button("üìÇ Xem")

    df_ls_xe = df_ls[df_ls["Bi·ªÉn s·ªë"] == bien_so]

    if tu_ngay and den_ngay:
        if tu_ngay > den_ngay:
            st.error("‚ùó Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c.")
        else:
            df_ls_xe = df_ls_xe[(df_ls_xe["Ng√†y"] >= pd.to_datetime(tu_ngay)) & (df_ls_xe["Ng√†y"] <= pd.to_datetime(den_ngay))]

    elif tu_ngay:
        df_ls_xe = df_ls_xe[df_ls_xe["Ng√†y"] >= pd.to_datetime(tu_ngay)]
    elif den_ngay:
        df_ls_xe = df_ls_xe[df_ls_xe["Ng√†y"] <= pd.to_datetime(den_ngay)]

    if df_ls_xe.empty:
        st.warning("üö´ Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng.")
    else:
        st.dataframe(df_ls_xe, use_container_width=True)

        # T·ªïng chi ph√≠
        if "Chi ph√≠" in df_ls_xe.columns:
            try:
                df_ls_xe["Chi ph√≠"] = pd.to_numeric(df_ls_xe["Chi ph√≠"], errors="coerce")
                tong = df_ls_xe["Chi ph√≠"].sum()
                st.markdown(f"### üí∞ T·ªïng chi ph√≠: **{tong:,.0f} VND**")
            except:
                st.warning("‚ö†Ô∏è C·ªôt Chi ph√≠ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë.")

        # Xu·∫•t Excel
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_ls_xe.to_excel(writer, index=False, sheet_name="Lich_su_bao_duong")
        st.download_button(
            label="üì• T·∫£i xu·ªëng Excel",
            data=output.getvalue(),
            file_name=f"lich_su_{bien_so}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
