import streamlit as st
import pandas as pd
import gspread
from google.oauth2 import service_account
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, JsCode
from io import BytesIO
import xlsxwriter
from datetime import datetime

# K·∫øt n·ªëi Google Sheets
scope = ["https://www.googleapis.com/auth/spreadsheets"]
creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=scope
)
gc = gspread.authorize(creds)

@st.cache_data(ttl=120)
def load_data():
    sheet = gc.open_by_key("1vVwCCoKCuRZZLx6QrprgKM8b067F-p8QKYVbkc1yavo")
    df_xe = pd.DataFrame(sheet.worksheet("Xe").get_all_records())
    df_ls = pd.DataFrame(sheet.worksheet("L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng").get_all_records())
    df_next = pd.DataFrame(sheet.worksheet("L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo").get_all_records())
    return df_xe, df_ls, df_next

df_xe, df_ls, df_next = load_data()

# C·∫•u h√¨nh Streamlit
st.set_page_config(page_title="Tra c·ª©u l·ªãch b·∫£o d∆∞·ª°ng", layout="wide")
st.title("üîß Tra c·ª©u l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng xe")

# Ch·ªçn bi·ªÉn s·ªë
bien_so_list = df_xe["Bi·ªÉn s·ªë"].dropna().unique().tolist()
selected_bien_so = st.selectbox("üìå Ch·ªçn bi·ªÉn s·ªë xe:", sorted(bien_so_list))

# Th√¥ng tin xe
xe_info = df_xe[df_xe["Bi·ªÉn s·ªë"] == selected_bien_so].iloc[0]
thong_tin_html = f"""
<table style="border-collapse: collapse; width: 100%;">
  <tr><td style="padding: 6px;"><b>üöó Bi·ªÉn s·ªë</b></td><td style="padding: 6px;">{xe_info['Bi·ªÉn s·ªë']}</td></tr>
  <tr><td style="padding: 6px;"><b>üîß Lo·∫°i xe</b></td><td style="padding: 6px;">{xe_info['Lo·∫°i xe']}</td></tr>
  <tr><td style="padding: 6px;"><b>üìÖ NƒÉm s·∫£n xu·∫•t</b></td><td style="padding: 6px;">{int(xe_info['NƒÉm s·∫£n xu·∫•t'])}</td></tr>
  <tr><td style="padding: 6px;"><b>üìç Tr·∫°ng th√°i</b></td><td style="padding: 6px;">{xe_info['Tr·∫°ng th√°i']}</td></tr>
</table>
"""
st.markdown("### üìÑ Th√¥ng tin xe")
st.markdown(thong_tin_html, unsafe_allow_html=True)

# L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo
st.markdown("### üìÖ L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo:")
df_next_filtered = df_next[df_next["Bi·ªÉn s·ªë"] == selected_bien_so]
if not df_next_filtered.empty:
    st.write(f"- **D·ª± ki·∫øn:** {df_next_filtered.iloc[0]['D·ª± ki·∫øn l·∫ßn ti·∫øp theo']}")
    st.write(f"- **G·ª£i √Ω n·ªôi dung:** {df_next_filtered.iloc[0]['G·ª£i √Ω n·ªôi dung']}")
else:
    st.warning("Ch∆∞a c√≥ l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo.")

# B·ªô l·ªçc th·ªùi gian
st.markdown("### üìã L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
col_tu, col_den, col_xem = st.columns([2, 2, 1])
tu_ngay = col_tu.date_input("T·ª´ ng√†y (DD/MM/YYYY)", format="DD/MM/YYYY", value=None)
den_ngay = col_den.date_input("ƒê·∫øn ng√†y (DD/MM/YYYY)", format="DD/MM/YYYY", value=None)
filter_btn = col_xem.button("üîç Xem")

# L·ªçc d·ªØ li·ªáu
df_ls = df_ls[df_ls["Bi·ªÉn s·ªë"] == selected_bien_so]
df_ls["Ng√†y"] = pd.to_datetime(df_ls["Ng√†y"], errors="coerce")
df_ls = df_ls.dropna(subset=["Ng√†y"])

if filter_btn and tu_ngay and den_ngay:
    if tu_ngay > den_ngay:
        st.error("‚ùóÔ∏èT·ª´ ng√†y ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ƒê·∫øn ng√†y.")
    else:
        df_ls = df_ls[(df_ls["Ng√†y"].dt.date >= tu_ngay) & (df_ls["Ng√†y"].dt.date <= den_ngay)]

# ƒê·ªãnh d·∫°ng
df_ls["Ng√†y"] = df_ls["Ng√†y"].dt.strftime("%d/%m/%Y")
df_ls["Chi ph√≠"] = pd.to_numeric(df_ls["Chi ph√≠"], errors="coerce").fillna(0)
df_ls["Chi ph√≠"] = df_ls["Chi ph√≠"].apply(lambda x: f"{x:,.0f}".replace(",", "."))

# Giao di·ªán b·∫£ng
one_line_style = JsCode("""
    function(params) {
        return {
            'white-space': 'nowrap',
            'overflow': 'hidden',
            'text-overflow': 'ellipsis'
        }
    }
""")

gb = GridOptionsBuilder.from_dataframe(df_ls)
gb.configure_column("Bi·ªÉn s·ªë", wrapText=False, autoHeight=False, width=90, cellStyle=one_line_style)
gb.configure_column("Ng√†y", wrapText=False, autoHeight=False, width=90, cellStyle=one_line_style)
gb.configure_column("Chi ph√≠", wrapText=False, autoHeight=False, width=100, cellStyle=one_line_style)
gb.configure_column("N·ªôi dung", wrapText=False, autoHeight=False, cellStyle=JsCode("""
    function(params) {
        return {
            'white-space': 'nowrap',
            'overflow': 'hidden',
            'text-overflow': 'ellipsis',
            'maxWidth': '250px'
        };
    }
"""))
gb.configure_grid_options(domLayout='normal', suppressRowClickSelection=False)
grid_options = gb.build()

# Hi·ªÉn th·ªã b·∫£ng
st.markdown("### üìë Chi ti·∫øt l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
row_height = 38
padding = 60
grid_height = len(df_ls) * row_height + padding
grid_height = max(150, min(600, grid_height))

grid_response = AgGrid(
    df_ls,
    gridOptions=grid_options,
    height=grid_height,
    width="100%",
    fit_columns_on_grid_load=False,
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    allow_unsafe_jscode=True,
)

# N·ªôi dung chi ti·∫øt
selected = grid_response["selected_rows"]
if selected:
    st.markdown("#### üìù N·ªôi dung chi ti·∫øt:")
    st.info(selected[0]["N·ªôi dung"])

# T·ªïng chi ph√≠
tong_chi_phi = df
