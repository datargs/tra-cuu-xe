import streamlit as st
import pandas as pd
import gspread
from google.oauth2 import service_account
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, JsCode
from io import BytesIO
import datetime
import base64

# Load credentials t·ª´ Streamlit secrets
creds_dict = st.secrets["gcp_service_account"]
credentials = service_account.Credentials.from_service_account_info(creds_dict)

# K·∫øt n·ªëi Google Sheet
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("1vVwCCoKCuRZZLx6QrprgKM8b067F-p8QKYVbkc1yavo")

# Load d·ªØ li·ªáu t·ª´ c√°c sheet
ws_xe = sheet.worksheet("Xe")
ws_ls = sheet.worksheet("L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
ws_tiep = sheet.worksheet("L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo")

df_xe = pd.DataFrame(ws_xe.get_all_records())
df_ls = pd.DataFrame(ws_ls.get_all_records())
df_tiep = pd.DataFrame(ws_tiep.get_all_records())

# Ti√™u ƒë·ªÅ
st.title("üìã Tra c·ª©u b·∫£o d∆∞·ª°ng xe")

# Ch·ªçn bi·ªÉn s·ªë
bien_so_list = df_xe["Bi·ªÉn s·ªë"].unique().tolist()
bien_so = st.selectbox("Ch·ªçn bi·ªÉn s·ªë xe:", sorted(bien_so_list))

# Hi·ªÉn th·ªã th√¥ng tin xe
df_info = df_xe[df_xe["Bi·ªÉn s·ªë"] == bien_so]
if not df_info.empty:
    loai_xe = df_info.iloc[0]["Lo·∫°i xe"]
    nam_sx = int(df_info.iloc[0]["NƒÉm s·∫£n xu·∫•t"])
    trang_thai = df_info.iloc[0]["Tr·∫°ng th√°i"]
    st.markdown(f"#### üöó {bien_so} ‚Äî {loai_xe} ‚Äî {nam_sx} ‚Äî {trang_thai}")

# Hi·ªÉn th·ªã l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo
df_next = df_tiep[df_tiep["Bi·ªÉn s·ªë"] == bien_so]
if not df_next.empty:
    st.subheader("üìÖ L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo:")
    st.write(df_next.iloc[0].to_dict())
else:
    st.warning("Ch∆∞a c√≥ l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo")

# L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng
df_bs = df_ls[df_ls["Bi·ªÉn s·ªë"] == bien_so].copy()

# ƒê·ªãnh d·∫°ng ng√†y
try:
    df_bs["Ng√†y"] = pd.to_datetime(df_bs["Ng√†y"], dayfirst=True)
except:
    pass

# B·ªô l·ªçc ng√†y
df_bs = df_bs.sort_values("Ng√†y", ascending=False)
st.markdown("### üìú L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
col1, col2, col3 = st.columns([2, 2, 1])
with col1:
    tu_ngay = st.date_input("T·ª´ ng√†y", value=None, key="tu_ngay")
with col2:
    den_ngay = st.date_input("ƒê·∫øn ng√†y", value=None, key="den_ngay")
with col3:
    xem = st.button("Xem")

if tu_ngay and den_ngay and tu_ngay > den_ngay:
    st.error("‚ùå T·ª´ ng√†y ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ƒê·∫øn ng√†y")
else:
    if tu_ngay:
        df_bs = df_bs[df_bs["Ng√†y"] >= pd.to_datetime(tu_ngay)]
    if den_ngay:
        df_bs = df_bs[df_bs["Ng√†y"] <= pd.to_datetime(den_ngay)]

# Hi·ªÉn th·ªã b·∫£ng ƒë·∫πp v·ªõi AgGrid
if not df_bs.empty:
    df_bs["Chi ph√≠"] = df_bs["Chi ph√≠"].astype(str)
    df_bs["Ng√†y hi·ªÉn th·ªã"] = df_bs["Ng√†y"].dt.strftime("%d/%m/%Y")
    df_bs["N·ªôi dung ng·∫Øn"] = df_bs["N·ªôi dung"].str.wrap(60).str.split("\n").str[0] + "..."

    cell_style_wrap = JsCode("""
    function(params) {
        return {
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis'
        }
    }
    """)

    gb = GridOptionsBuilder.from_dataframe(df_bs[["Ng√†y hi·ªÉn th·ªã", "N·ªôi dung ng·∫Øn", "Chi ph√≠", "Ghi ch√∫"]])
    gb.configure_column("Ng√†y hi·ªÉn th·ªã", header_name="Ng√†y", cellStyle=cell_style_wrap)
    gb.configure_column("Chi ph√≠", cellStyle=cell_style_wrap)
    gb.configure_column("N·ªôi dung ng·∫Øn", header_name="N·ªôi dung", tooltipField="N·ªôi dung ng·∫Øn", cellStyle=cell_style_wrap)
    gb.configure_column("Ghi ch√∫", cellStyle=cell_style_wrap)
    gridOptions = gb.build()

    st.markdown("### üìä Chi ti·∫øt b·∫£o d∆∞·ª°ng")
    AgGrid(
        df_bs[["Ng√†y hi·ªÉn th·ªã", "N·ªôi dung ng·∫Øn", "Chi ph√≠", "Ghi ch√∫"]],
        gridOptions=gridOptions,
        update_mode=GridUpdateMode.NO_UPDATE,
        fit_columns_on_grid_load=True,
        theme="alpine",
        height=min(600, 40 * len(df_bs) + 100),
    )

    # T·ªïng chi ph√≠
    try:
        tong = pd.to_numeric(df_bs["Chi ph√≠"], errors="coerce").sum()
        st.success(f"üí∞ T·ªïng chi ph√≠: {tong:,.0f} ƒë")
    except:
        pass

    # Xu·∫•t Excel
    to_excel = st.button("üì§ Xu·∫•t Excel")
    if to_excel:
        out = BytesIO()
        with pd.ExcelWriter(out, engine='xlsxwriter') as writer:
            df_bs.to_excel(writer, index=False, sheet_name="LichSu")
            writer.close()
        st.download_button(
            label="T·∫£i file Excel",
            data=out.getvalue(),
            file_name=f"lich_su_{bien_so}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng.")
