import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import io

# C·∫•u h√¨nh k·∫øt n·ªëi Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_dict = st.secrets["gcp_service_account"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client = gspread.authorize(credentials)

# L·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1vVwCCoKCuRZZLx6QrprgKM8b067F-p8QKYVbkc1yavo")
df_xe = pd.DataFrame(spreadsheet.worksheet("Xe").get_all_records())
df_ls = pd.DataFrame(spreadsheet.worksheet("L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng").get_all_records())
df_next = pd.DataFrame(spreadsheet.worksheet("L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo").get_all_records())

st.set_page_config(layout="wide")
st.title("üöó Tra c·ª©u l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng xe")

# Giao di·ªán ch·ªçn bi·ªÉn s·ªë n·∫±m tr√™n c√πng, c√≥ t√¨m ki·∫øm
selected_plate = st.selectbox("Ch·ªçn bi·ªÉn s·ªë xe", options=df_xe["Bi·ªÉn s·ªë"].unique(), index=None)

# Khung l·ªçc theo ng√†y
col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    from_date = st.date_input("T·ª´ ng√†y", value=None)
with col2:
    to_date = st.date_input("ƒê·∫øn ng√†y", value=None)
with col3:
    xem = st.button("üîç Xem")

if selected_plate:
    # Hi·ªÉn th·ªã th√¥ng tin xe t·ª´ b·∫£ng "Xe"
    info = df_xe[df_xe["Bi·ªÉn s·ªë"] == selected_plate]
    st.subheader("üìÑ Th√¥ng tin xe")
    st.table(info)

    # Hi·ªÉn th·ªã l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo
    next_bd = df_next[df_next["Bi·ªÉn s·ªë"] == selected_plate]
    st.subheader("üõ†Ô∏è L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo")
    if not next_bd.empty:
        st.table(next_bd)
    else:
        st.info("Ch∆∞a c√≥ l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo.")

    # L·ªçc v√† hi·ªÉn th·ªã l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng
    df_filtered = df_ls[df_ls["Bi·ªÉn s·ªë"] == selected_plate].copy()
    df_filtered["Ng√†y"] = pd.to_datetime(df_filtered["Ng√†y"], dayfirst=True, errors="coerce")

    if xem and from_date and to_date:
        if from_date > to_date:
            st.error("‚ùå 'T·ª´ ng√†y' ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng 'ƒê·∫øn ng√†y'. Vui l√≤ng ch·ªçn l·∫°i.")
        else:
            df_filtered = df_filtered[
                (df_filtered["Ng√†y"] >= pd.to_datetime(from_date)) &
                (df_filtered["Ng√†y"] <= pd.to_datetime(to_date))
            ]

    st.subheader("üìú L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
    st.dataframe(df_filtered, use_container_width=True)

    # T√≠nh t·ªïng chi ph√≠
    if "Chi ph√≠" in df_filtered.columns:
        df_filtered["Chi ph√≠ s·ªë"] = pd.to_numeric(df_filtered["Chi ph√≠"], errors="coerce")
        total_cost = df_filtered["Chi ph√≠ s·ªë"].sum()
        st.markdown(f"**üí∞ T·ªïng chi ph√≠: {total_cost:,.0f} VND**")

    # Xu·∫•t Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df_filtered.drop(columns=["Chi ph√≠ s·ªë"], errors="ignore").to_excel(writer, index=False, sheet_name="L·ªãch s·ª≠")
    st.download_button(
        label="üì• T·∫£i Excel l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng",
        data=output.getvalue(),
        file_name=f"lich_su_bao_duong_{selected_plate}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
