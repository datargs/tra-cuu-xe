import streamlit as st
import pandas as pd
import gspread
from google.oauth2 import service_account
from st_aggrid import AgGrid, GridOptionsBuilder
from io import BytesIO
import datetime

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Tra c·ª©u b·∫£o d∆∞·ª°ng xe", layout="wide")

# Load credentials t·ª´ secrets
creds = service_account.Credentials.from_service_account_info(st.secrets["gcp_service_account"])
gc = gspread.authorize(creds)

# M·ªü Google Sheet
sheet = gc.open_by_key("1vVwCCoKCuRZZLx6QrprgKM8b067F-p8QKYVbkc1yavo")
ws_xe = sheet.worksheet("Xe")
ws_ls = sheet.worksheet("L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
ws_next = sheet.worksheet("L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo")

# ƒê·ªçc d·ªØ li·ªáu
df_xe = pd.DataFrame(ws_xe.get_all_records())
df_ls = pd.DataFrame(ws_ls.get_all_records())
df_next = pd.DataFrame(ws_next.get_all_records())

# Ti√™u ƒë·ªÅ trang
st.title("üöó Tra c·ª©u l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng xe")

# L·∫•y danh s√°ch bi·ªÉn s·ªë kh√¥ng tr√πng
list_bien_so = sorted(df_xe["Bi·ªÉn s·ªë"].dropna().unique().tolist())
selected_plate = st.selectbox("üîç Ch·ªçn bi·ªÉn s·ªë xe", options=list_bien_so)

# Hi·ªÉn th·ªã th√¥ng tin xe t·ª´ b·∫£ng "Xe"
info = df_xe[df_xe["Bi·ªÉn s·ªë"] == selected_plate].squeeze()
st.markdown(f"""
**Bi·ªÉn s·ªë:** {info['Bi·ªÉn s·ªë']}  
**Lo·∫°i xe:** {info['Lo·∫°i xe']}  
**NƒÉm s·∫£n xu·∫•t:** {int(info['NƒÉm s·∫£n xu·∫•t'])}  
**Tr·∫°ng th√°i:** {info['Tr·∫°ng th√°i']}
""")

# Hi·ªÉn th·ªã l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo
df_next_plate = df_next[df_next["Bi·ªÉn s·ªë"] == selected_plate]
st.subheader("üìÖ L·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo:")

if not df_next_plate.empty:
    row = df_next_plate.iloc[0]
    st.markdown(f"**D·ª± ki·∫øn l·∫ßn ti·∫øp theo:** {row['D·ª± ki·∫øn l·∫ßn ti·∫øp theo']}  \n**G·ª£i √Ω n·ªôi dung:** {row['G·ª£i √Ω n·ªôi dung']}")
else:
    st.warning("Ch∆∞a c√≥ l·ªãch b·∫£o d∆∞·ª°ng ti·∫øp theo.")

# Format ng√†y
df_ls["Ng√†y"] = pd.to_datetime(df_ls["Ng√†y"], errors='coerce')
df_ls = df_ls[df_ls["Bi·ªÉn s·ªë"] == selected_plate].copy()
df_ls["Ng√†y hi·ªÉn th·ªã"] = df_ls["Ng√†y"].dt.strftime("%d/%m/%Y")

# B·ªô l·ªçc ng√†y
st.subheader("üìÇ L·ªçc theo th·ªùi gian")

col1, col2, col3 = st.columns([2, 2, 1])

with col1:
    tu_ngay = st.date_input("T·ª´ ng√†y", value=None, format="DD/MM/YYYY")

with col2:
    den_ngay = st.date_input("ƒê·∫øn ng√†y", value=None, format="DD/MM/YYYY")

with col3:
    if st.button("Xem"):
        if tu_ngay and den_ngay and tu_ngay > den_ngay:
            st.error("‚ùå Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c.")
        else:
            if tu_ngay:
                df_ls = df_ls[df_ls["Ng√†y"] >= pd.to_datetime(tu_ngay)]
            if den_ngay:
                df_ls = df_ls[df_ls["Ng√†y"] <= pd.to_datetime(den_ngay)]

# Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng
st.subheader("üõ†Ô∏è L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")

if not df_ls.empty:
    gb = GridOptionsBuilder.from_dataframe(df_ls[["Ng√†y hi·ªÉn th·ªã", "N·ªôi dung", "Chi ph√≠", "Ghi ch√∫"]])
    gb.configure_column("N·ªôi dung", wrapText=True, autoHeight=True)
    gb.configure_column("Ghi ch√∫", wrapText=True, autoHeight=True)
    gb.configure_grid_options(domLayout='normal')
    gridOptions = gb.build()

    AgGrid(df_ls[["Ng√†y hi·ªÉn th·ªã", "N·ªôi dung", "Chi ph√≠", "Ghi ch√∫"]],
           gridOptions=gridOptions,
           fit_columns_on_grid_load=True,
           height=(len(df_ls)*35 + 60),
           theme='streamlit')

    # T·ªïng chi ph√≠
    st.markdown(f"**üí∞ T·ªïng chi ph√≠:** {df_ls['Chi ph√≠'].sum():,.0f} VND")
else:
    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£o d∆∞·ª°ng ph√π h·ª£p.")

# Xu·∫•t Excel
st.subheader("üì§ Xu·∫•t d·ªØ li·ªáu")

if st.button("Xu·∫•t Excel"):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df_ls.to_excel(writer, index=False, sheet_name="L·ªãch s·ª≠ b·∫£o d∆∞·ª°ng")
    st.download_button(label="üì• T·∫£i Excel", data=output.getvalue(),
                       file_name=f"lich_su_bao_duong_{selected_plate}.xlsx", mime="application/vnd.ms-excel")
